// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthProvider is an object representing the database table.
type AuthProvider struct {
	ID                string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID         string    `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	Provider          string    `boil:"provider" json:"provider" toml:"provider" yaml:"provider"`
	Email             string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Name              string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	FirstName         string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName          string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	NickName          string    `boil:"nick_name" json:"nick_name" toml:"nick_name" yaml:"nick_name"`
	Description       string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	ProviderUserID    string    `boil:"provider_user_id" json:"provider_user_id" toml:"provider_user_id" yaml:"provider_user_id"`
	AvatarURL         string    `boil:"avatar_url" json:"avatar_url" toml:"avatar_url" yaml:"avatar_url"`
	Location          string    `boil:"location" json:"location" toml:"location" yaml:"location"`
	AccessToken       string    `boil:"access_token" json:"access_token" toml:"access_token" yaml:"access_token"`
	AccessTokenSecret string    `boil:"access_token_secret" json:"access_token_secret" toml:"access_token_secret" yaml:"access_token_secret"`
	RefreshToken      string    `boil:"refresh_token" json:"refresh_token" toml:"refresh_token" yaml:"refresh_token"`
	ExpiresAt         time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	IDToken           string    `boil:"id_token" json:"id_token" toml:"id_token" yaml:"id_token"`

	R *authProviderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authProviderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthProviderColumns = struct {
	ID                string
	AccountID         string
	Provider          string
	Email             string
	Name              string
	FirstName         string
	LastName          string
	NickName          string
	Description       string
	ProviderUserID    string
	AvatarURL         string
	Location          string
	AccessToken       string
	AccessTokenSecret string
	RefreshToken      string
	ExpiresAt         string
	IDToken           string
}{
	ID:                "id",
	AccountID:         "account_id",
	Provider:          "provider",
	Email:             "email",
	Name:              "name",
	FirstName:         "first_name",
	LastName:          "last_name",
	NickName:          "nick_name",
	Description:       "description",
	ProviderUserID:    "provider_user_id",
	AvatarURL:         "avatar_url",
	Location:          "location",
	AccessToken:       "access_token",
	AccessTokenSecret: "access_token_secret",
	RefreshToken:      "refresh_token",
	ExpiresAt:         "expires_at",
	IDToken:           "id_token",
}

var AuthProviderTableColumns = struct {
	ID                string
	AccountID         string
	Provider          string
	Email             string
	Name              string
	FirstName         string
	LastName          string
	NickName          string
	Description       string
	ProviderUserID    string
	AvatarURL         string
	Location          string
	AccessToken       string
	AccessTokenSecret string
	RefreshToken      string
	ExpiresAt         string
	IDToken           string
}{
	ID:                "auth_provider.id",
	AccountID:         "auth_provider.account_id",
	Provider:          "auth_provider.provider",
	Email:             "auth_provider.email",
	Name:              "auth_provider.name",
	FirstName:         "auth_provider.first_name",
	LastName:          "auth_provider.last_name",
	NickName:          "auth_provider.nick_name",
	Description:       "auth_provider.description",
	ProviderUserID:    "auth_provider.provider_user_id",
	AvatarURL:         "auth_provider.avatar_url",
	Location:          "auth_provider.location",
	AccessToken:       "auth_provider.access_token",
	AccessTokenSecret: "auth_provider.access_token_secret",
	RefreshToken:      "auth_provider.refresh_token",
	ExpiresAt:         "auth_provider.expires_at",
	IDToken:           "auth_provider.id_token",
}

// Generated where

var AuthProviderWhere = struct {
	ID                whereHelperstring
	AccountID         whereHelperstring
	Provider          whereHelperstring
	Email             whereHelperstring
	Name              whereHelperstring
	FirstName         whereHelperstring
	LastName          whereHelperstring
	NickName          whereHelperstring
	Description       whereHelperstring
	ProviderUserID    whereHelperstring
	AvatarURL         whereHelperstring
	Location          whereHelperstring
	AccessToken       whereHelperstring
	AccessTokenSecret whereHelperstring
	RefreshToken      whereHelperstring
	ExpiresAt         whereHelpertime_Time
	IDToken           whereHelperstring
}{
	ID:                whereHelperstring{field: "\"auth_provider\".\"id\""},
	AccountID:         whereHelperstring{field: "\"auth_provider\".\"account_id\""},
	Provider:          whereHelperstring{field: "\"auth_provider\".\"provider\""},
	Email:             whereHelperstring{field: "\"auth_provider\".\"email\""},
	Name:              whereHelperstring{field: "\"auth_provider\".\"name\""},
	FirstName:         whereHelperstring{field: "\"auth_provider\".\"first_name\""},
	LastName:          whereHelperstring{field: "\"auth_provider\".\"last_name\""},
	NickName:          whereHelperstring{field: "\"auth_provider\".\"nick_name\""},
	Description:       whereHelperstring{field: "\"auth_provider\".\"description\""},
	ProviderUserID:    whereHelperstring{field: "\"auth_provider\".\"provider_user_id\""},
	AvatarURL:         whereHelperstring{field: "\"auth_provider\".\"avatar_url\""},
	Location:          whereHelperstring{field: "\"auth_provider\".\"location\""},
	AccessToken:       whereHelperstring{field: "\"auth_provider\".\"access_token\""},
	AccessTokenSecret: whereHelperstring{field: "\"auth_provider\".\"access_token_secret\""},
	RefreshToken:      whereHelperstring{field: "\"auth_provider\".\"refresh_token\""},
	ExpiresAt:         whereHelpertime_Time{field: "\"auth_provider\".\"expires_at\""},
	IDToken:           whereHelperstring{field: "\"auth_provider\".\"id_token\""},
}

// AuthProviderRels is where relationship names are stored.
var AuthProviderRels = struct {
	Account string
}{
	Account: "Account",
}

// authProviderR is where relationships are stored.
type authProviderR struct {
	Account *Account `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
}

// NewStruct creates a new relationship struct
func (*authProviderR) NewStruct() *authProviderR {
	return &authProviderR{}
}

func (r *authProviderR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

// authProviderL is where Load methods for each relationship are stored.
type authProviderL struct{}

var (
	authProviderAllColumns            = []string{"id", "account_id", "provider", "email", "name", "first_name", "last_name", "nick_name", "description", "provider_user_id", "avatar_url", "location", "access_token", "access_token_secret", "refresh_token", "expires_at", "id_token"}
	authProviderColumnsWithoutDefault = []string{"account_id"}
	authProviderColumnsWithDefault    = []string{"id", "provider", "email", "name", "first_name", "last_name", "nick_name", "description", "provider_user_id", "avatar_url", "location", "access_token", "access_token_secret", "refresh_token", "expires_at", "id_token"}
	authProviderPrimaryKeyColumns     = []string{"id"}
	authProviderGeneratedColumns      = []string{}
)

type (
	// AuthProviderSlice is an alias for a slice of pointers to AuthProvider.
	// This should almost always be used instead of []AuthProvider.
	AuthProviderSlice []*AuthProvider
	// AuthProviderHook is the signature for custom AuthProvider hook methods
	AuthProviderHook func(context.Context, boil.ContextExecutor, *AuthProvider) error

	authProviderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authProviderType                 = reflect.TypeOf(&AuthProvider{})
	authProviderMapping              = queries.MakeStructMapping(authProviderType)
	authProviderPrimaryKeyMapping, _ = queries.BindMapping(authProviderType, authProviderMapping, authProviderPrimaryKeyColumns)
	authProviderInsertCacheMut       sync.RWMutex
	authProviderInsertCache          = make(map[string]insertCache)
	authProviderUpdateCacheMut       sync.RWMutex
	authProviderUpdateCache          = make(map[string]updateCache)
	authProviderUpsertCacheMut       sync.RWMutex
	authProviderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authProviderAfterSelectHooks []AuthProviderHook

var authProviderBeforeInsertHooks []AuthProviderHook
var authProviderAfterInsertHooks []AuthProviderHook

var authProviderBeforeUpdateHooks []AuthProviderHook
var authProviderAfterUpdateHooks []AuthProviderHook

var authProviderBeforeDeleteHooks []AuthProviderHook
var authProviderAfterDeleteHooks []AuthProviderHook

var authProviderBeforeUpsertHooks []AuthProviderHook
var authProviderAfterUpsertHooks []AuthProviderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthProvider) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authProviderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthProvider) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authProviderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthProvider) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authProviderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthProvider) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authProviderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthProvider) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authProviderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthProvider) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authProviderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthProvider) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authProviderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthProvider) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authProviderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthProvider) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authProviderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthProviderHook registers your hook function for all future operations.
func AddAuthProviderHook(hookPoint boil.HookPoint, authProviderHook AuthProviderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authProviderAfterSelectHooks = append(authProviderAfterSelectHooks, authProviderHook)
	case boil.BeforeInsertHook:
		authProviderBeforeInsertHooks = append(authProviderBeforeInsertHooks, authProviderHook)
	case boil.AfterInsertHook:
		authProviderAfterInsertHooks = append(authProviderAfterInsertHooks, authProviderHook)
	case boil.BeforeUpdateHook:
		authProviderBeforeUpdateHooks = append(authProviderBeforeUpdateHooks, authProviderHook)
	case boil.AfterUpdateHook:
		authProviderAfterUpdateHooks = append(authProviderAfterUpdateHooks, authProviderHook)
	case boil.BeforeDeleteHook:
		authProviderBeforeDeleteHooks = append(authProviderBeforeDeleteHooks, authProviderHook)
	case boil.AfterDeleteHook:
		authProviderAfterDeleteHooks = append(authProviderAfterDeleteHooks, authProviderHook)
	case boil.BeforeUpsertHook:
		authProviderBeforeUpsertHooks = append(authProviderBeforeUpsertHooks, authProviderHook)
	case boil.AfterUpsertHook:
		authProviderAfterUpsertHooks = append(authProviderAfterUpsertHooks, authProviderHook)
	}
}

// One returns a single authProvider record from the query.
func (q authProviderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthProvider, error) {
	o := &AuthProvider{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_provider")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AuthProvider records from the query.
func (q authProviderQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthProviderSlice, error) {
	var o []*AuthProvider

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthProvider slice")
	}

	if len(authProviderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AuthProvider records in the query.
func (q authProviderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_provider rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authProviderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_provider exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *AuthProvider) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authProviderL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthProvider interface{}, mods queries.Applicator) error {
	var slice []*AuthProvider
	var object *AuthProvider

	if singular {
		var ok bool
		object, ok = maybeAuthProvider.(*AuthProvider)
		if !ok {
			object = new(AuthProvider)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthProvider)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthProvider))
			}
		}
	} else {
		s, ok := maybeAuthProvider.(*[]*AuthProvider)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthProvider)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthProvider))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authProviderR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authProviderR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AuthProvider = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AuthProvider = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the authProvider to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AuthProvider.
func (o *AuthProvider) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auth_provider\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, authProviderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &authProviderR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AuthProvider: o,
		}
	} else {
		related.R.AuthProvider = o
	}

	return nil
}

// AuthProviders retrieves all the records using an executor.
func AuthProviders(mods ...qm.QueryMod) authProviderQuery {
	mods = append(mods, qm.From("\"auth_provider\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auth_provider\".*"})
	}

	return authProviderQuery{q}
}

// FindAuthProvider retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthProvider(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthProvider, error) {
	authProviderObj := &AuthProvider{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auth_provider\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authProviderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_provider")
	}

	if err = authProviderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authProviderObj, err
	}

	return authProviderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthProvider) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_provider provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authProviderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authProviderInsertCacheMut.RLock()
	cache, cached := authProviderInsertCache[key]
	authProviderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authProviderAllColumns,
			authProviderColumnsWithDefault,
			authProviderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authProviderType, authProviderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authProviderType, authProviderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auth_provider\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auth_provider\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_provider")
	}

	if !cached {
		authProviderInsertCacheMut.Lock()
		authProviderInsertCache[key] = cache
		authProviderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AuthProvider.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthProvider) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authProviderUpdateCacheMut.RLock()
	cache, cached := authProviderUpdateCache[key]
	authProviderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authProviderAllColumns,
			authProviderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auth_provider, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auth_provider\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authProviderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authProviderType, authProviderMapping, append(wl, authProviderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auth_provider row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auth_provider")
	}

	if !cached {
		authProviderUpdateCacheMut.Lock()
		authProviderUpdateCache[key] = cache
		authProviderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q authProviderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auth_provider")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auth_provider")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthProviderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auth_provider\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authProviderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authProvider")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthProvider) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_provider provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authProviderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authProviderUpsertCacheMut.RLock()
	cache, cached := authProviderUpsertCache[key]
	authProviderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authProviderAllColumns,
			authProviderColumnsWithDefault,
			authProviderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authProviderAllColumns,
			authProviderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auth_provider, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authProviderPrimaryKeyColumns))
			copy(conflict, authProviderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auth_provider\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authProviderType, authProviderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authProviderType, authProviderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auth_provider")
	}

	if !cached {
		authProviderUpsertCacheMut.Lock()
		authProviderUpsertCache[key] = cache
		authProviderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AuthProvider record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthProvider) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthProvider provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authProviderPrimaryKeyMapping)
	sql := "DELETE FROM \"auth_provider\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auth_provider")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auth_provider")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authProviderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authProviderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auth_provider")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_provider")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthProviderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authProviderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auth_provider\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authProviderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_provider")
	}

	if len(authProviderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthProvider) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthProvider(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthProviderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthProviderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auth_provider\".* FROM \"auth_provider\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authProviderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthProviderSlice")
	}

	*o = slice

	return nil
}

// AuthProviderExists checks if the AuthProvider row exists.
func AuthProviderExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auth_provider\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_provider exists")
	}

	return exists, nil
}

// Exists checks if the AuthProvider row exists.
func (o *AuthProvider) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthProviderExists(ctx, exec, o.ID)
}
