// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FileGroup is an object representing the database table.
type FileGroup struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID      string    `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	Name           string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug           string    `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	ShowPublicList bool      `boil:"show_public_list" json:"show_public_list" toml:"show_public_list" yaml:"show_public_list"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *fileGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fileGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FileGroupColumns = struct {
	ID             string
	AccountID      string
	Name           string
	Slug           string
	ShowPublicList string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	AccountID:      "account_id",
	Name:           "name",
	Slug:           "slug",
	ShowPublicList: "show_public_list",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var FileGroupTableColumns = struct {
	ID             string
	AccountID      string
	Name           string
	Slug           string
	ShowPublicList string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "file_group.id",
	AccountID:      "file_group.account_id",
	Name:           "file_group.name",
	Slug:           "file_group.slug",
	ShowPublicList: "file_group.show_public_list",
	CreatedAt:      "file_group.created_at",
	UpdatedAt:      "file_group.updated_at",
}

// Generated where

var FileGroupWhere = struct {
	ID             whereHelperstring
	AccountID      whereHelperstring
	Name           whereHelperstring
	Slug           whereHelperstring
	ShowPublicList whereHelperbool
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"file_group\".\"id\""},
	AccountID:      whereHelperstring{field: "\"file_group\".\"account_id\""},
	Name:           whereHelperstring{field: "\"file_group\".\"name\""},
	Slug:           whereHelperstring{field: "\"file_group\".\"slug\""},
	ShowPublicList: whereHelperbool{field: "\"file_group\".\"show_public_list\""},
	CreatedAt:      whereHelpertime_Time{field: "\"file_group\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"file_group\".\"updated_at\""},
}

// FileGroupRels is where relationship names are stored.
var FileGroupRels = struct {
	Account string
	Files   string
}{
	Account: "Account",
	Files:   "Files",
}

// fileGroupR is where relationships are stored.
type fileGroupR struct {
	Account *Account  `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	Files   FileSlice `boil:"Files" json:"Files" toml:"Files" yaml:"Files"`
}

// NewStruct creates a new relationship struct
func (*fileGroupR) NewStruct() *fileGroupR {
	return &fileGroupR{}
}

func (r *fileGroupR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

func (r *fileGroupR) GetFiles() FileSlice {
	if r == nil {
		return nil
	}
	return r.Files
}

// fileGroupL is where Load methods for each relationship are stored.
type fileGroupL struct{}

var (
	fileGroupAllColumns            = []string{"id", "account_id", "name", "slug", "show_public_list", "created_at", "updated_at"}
	fileGroupColumnsWithoutDefault = []string{"account_id", "name", "slug"}
	fileGroupColumnsWithDefault    = []string{"id", "show_public_list", "created_at", "updated_at"}
	fileGroupPrimaryKeyColumns     = []string{"id"}
	fileGroupGeneratedColumns      = []string{}
)

type (
	// FileGroupSlice is an alias for a slice of pointers to FileGroup.
	// This should almost always be used instead of []FileGroup.
	FileGroupSlice []*FileGroup
	// FileGroupHook is the signature for custom FileGroup hook methods
	FileGroupHook func(context.Context, boil.ContextExecutor, *FileGroup) error

	fileGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fileGroupType                 = reflect.TypeOf(&FileGroup{})
	fileGroupMapping              = queries.MakeStructMapping(fileGroupType)
	fileGroupPrimaryKeyMapping, _ = queries.BindMapping(fileGroupType, fileGroupMapping, fileGroupPrimaryKeyColumns)
	fileGroupInsertCacheMut       sync.RWMutex
	fileGroupInsertCache          = make(map[string]insertCache)
	fileGroupUpdateCacheMut       sync.RWMutex
	fileGroupUpdateCache          = make(map[string]updateCache)
	fileGroupUpsertCacheMut       sync.RWMutex
	fileGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fileGroupAfterSelectHooks []FileGroupHook

var fileGroupBeforeInsertHooks []FileGroupHook
var fileGroupAfterInsertHooks []FileGroupHook

var fileGroupBeforeUpdateHooks []FileGroupHook
var fileGroupAfterUpdateHooks []FileGroupHook

var fileGroupBeforeDeleteHooks []FileGroupHook
var fileGroupAfterDeleteHooks []FileGroupHook

var fileGroupBeforeUpsertHooks []FileGroupHook
var fileGroupAfterUpsertHooks []FileGroupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FileGroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileGroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FileGroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileGroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FileGroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileGroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FileGroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileGroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FileGroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileGroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FileGroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileGroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FileGroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileGroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FileGroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileGroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FileGroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileGroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFileGroupHook registers your hook function for all future operations.
func AddFileGroupHook(hookPoint boil.HookPoint, fileGroupHook FileGroupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fileGroupAfterSelectHooks = append(fileGroupAfterSelectHooks, fileGroupHook)
	case boil.BeforeInsertHook:
		fileGroupBeforeInsertHooks = append(fileGroupBeforeInsertHooks, fileGroupHook)
	case boil.AfterInsertHook:
		fileGroupAfterInsertHooks = append(fileGroupAfterInsertHooks, fileGroupHook)
	case boil.BeforeUpdateHook:
		fileGroupBeforeUpdateHooks = append(fileGroupBeforeUpdateHooks, fileGroupHook)
	case boil.AfterUpdateHook:
		fileGroupAfterUpdateHooks = append(fileGroupAfterUpdateHooks, fileGroupHook)
	case boil.BeforeDeleteHook:
		fileGroupBeforeDeleteHooks = append(fileGroupBeforeDeleteHooks, fileGroupHook)
	case boil.AfterDeleteHook:
		fileGroupAfterDeleteHooks = append(fileGroupAfterDeleteHooks, fileGroupHook)
	case boil.BeforeUpsertHook:
		fileGroupBeforeUpsertHooks = append(fileGroupBeforeUpsertHooks, fileGroupHook)
	case boil.AfterUpsertHook:
		fileGroupAfterUpsertHooks = append(fileGroupAfterUpsertHooks, fileGroupHook)
	}
}

// One returns a single fileGroup record from the query.
func (q fileGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FileGroup, error) {
	o := &FileGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for file_group")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FileGroup records from the query.
func (q fileGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (FileGroupSlice, error) {
	var o []*FileGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FileGroup slice")
	}

	if len(fileGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FileGroup records in the query.
func (q fileGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count file_group rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fileGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if file_group exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *FileGroup) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// Files retrieves all the file's Files with an executor.
func (o *FileGroup) Files(mods ...qm.QueryMod) fileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"file\".\"file_group_id\"=?", o.ID),
	)

	return Files(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fileGroupL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFileGroup interface{}, mods queries.Applicator) error {
	var slice []*FileGroup
	var object *FileGroup

	if singular {
		var ok bool
		object, ok = maybeFileGroup.(*FileGroup)
		if !ok {
			object = new(FileGroup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFileGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFileGroup))
			}
		}
	} else {
		s, ok := maybeFileGroup.(*[]*FileGroup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFileGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFileGroup))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fileGroupR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fileGroupR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.FileGroups = append(foreign.R.FileGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.FileGroups = append(foreign.R.FileGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fileGroupL) LoadFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFileGroup interface{}, mods queries.Applicator) error {
	var slice []*FileGroup
	var object *FileGroup

	if singular {
		var ok bool
		object, ok = maybeFileGroup.(*FileGroup)
		if !ok {
			object = new(FileGroup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFileGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFileGroup))
			}
		}
	} else {
		s, ok := maybeFileGroup.(*[]*FileGroup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFileGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFileGroup))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fileGroupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fileGroupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`file`),
		qm.WhereIn(`file.file_group_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load file")
	}

	var resultSlice []*File
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice file")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on file")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for file")
	}

	if len(fileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Files = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fileR{}
			}
			foreign.R.FileGroup = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FileGroupID) {
				local.R.Files = append(local.R.Files, foreign)
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.FileGroup = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the fileGroup to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.FileGroups.
func (o *FileGroup) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"file_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, fileGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &fileGroupR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			FileGroups: FileGroupSlice{o},
		}
	} else {
		related.R.FileGroups = append(related.R.FileGroups, o)
	}

	return nil
}

// AddFiles adds the given related objects to the existing relationships
// of the file_group, optionally inserting them as new records.
// Appends related to o.R.Files.
// Sets related.R.FileGroup appropriately.
func (o *FileGroup) AddFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*File) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FileGroupID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"file\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"file_group_id"}),
				strmangle.WhereClause("\"", "\"", 2, filePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FileGroupID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &fileGroupR{
			Files: related,
		}
	} else {
		o.R.Files = append(o.R.Files, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fileR{
				FileGroup: o,
			}
		} else {
			rel.R.FileGroup = o
		}
	}
	return nil
}

// SetFiles removes all previously related items of the
// file_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FileGroup's Files accordingly.
// Replaces o.R.Files with related.
// Sets related.R.FileGroup's Files accordingly.
func (o *FileGroup) SetFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*File) error {
	query := "update \"file\" set \"file_group_id\" = null where \"file_group_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Files {
			queries.SetScanner(&rel.FileGroupID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FileGroup = nil
		}
		o.R.Files = nil
	}

	return o.AddFiles(ctx, exec, insert, related...)
}

// RemoveFiles relationships from objects passed in.
// Removes related items from R.Files (uses pointer comparison, removal does not keep order)
// Sets related.R.FileGroup.
func (o *FileGroup) RemoveFiles(ctx context.Context, exec boil.ContextExecutor, related ...*File) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FileGroupID, nil)
		if rel.R != nil {
			rel.R.FileGroup = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("file_group_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Files {
			if rel != ri {
				continue
			}

			ln := len(o.R.Files)
			if ln > 1 && i < ln-1 {
				o.R.Files[i] = o.R.Files[ln-1]
			}
			o.R.Files = o.R.Files[:ln-1]
			break
		}
	}

	return nil
}

// FileGroups retrieves all the records using an executor.
func FileGroups(mods ...qm.QueryMod) fileGroupQuery {
	mods = append(mods, qm.From("\"file_group\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"file_group\".*"})
	}

	return fileGroupQuery{q}
}

// FindFileGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFileGroup(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*FileGroup, error) {
	fileGroupObj := &FileGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"file_group\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fileGroupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from file_group")
	}

	if err = fileGroupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fileGroupObj, err
	}

	return fileGroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FileGroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no file_group provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fileGroupInsertCacheMut.RLock()
	cache, cached := fileGroupInsertCache[key]
	fileGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fileGroupAllColumns,
			fileGroupColumnsWithDefault,
			fileGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fileGroupType, fileGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fileGroupType, fileGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"file_group\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"file_group\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into file_group")
	}

	if !cached {
		fileGroupInsertCacheMut.Lock()
		fileGroupInsertCache[key] = cache
		fileGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FileGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FileGroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fileGroupUpdateCacheMut.RLock()
	cache, cached := fileGroupUpdateCache[key]
	fileGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fileGroupAllColumns,
			fileGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update file_group, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"file_group\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fileGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fileGroupType, fileGroupMapping, append(wl, fileGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update file_group row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for file_group")
	}

	if !cached {
		fileGroupUpdateCacheMut.Lock()
		fileGroupUpdateCache[key] = cache
		fileGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fileGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for file_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for file_group")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FileGroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"file_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fileGroupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fileGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fileGroup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FileGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no file_group provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fileGroupUpsertCacheMut.RLock()
	cache, cached := fileGroupUpsertCache[key]
	fileGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fileGroupAllColumns,
			fileGroupColumnsWithDefault,
			fileGroupColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fileGroupAllColumns,
			fileGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert file_group, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fileGroupPrimaryKeyColumns))
			copy(conflict, fileGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"file_group\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fileGroupType, fileGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fileGroupType, fileGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert file_group")
	}

	if !cached {
		fileGroupUpsertCacheMut.Lock()
		fileGroupUpsertCache[key] = cache
		fileGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FileGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FileGroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FileGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fileGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"file_group\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from file_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for file_group")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fileGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fileGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from file_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for file_group")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FileGroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fileGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"file_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fileGroupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fileGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for file_group")
	}

	if len(fileGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FileGroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFileGroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FileGroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FileGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"file_group\".* FROM \"file_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fileGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FileGroupSlice")
	}

	*o = slice

	return nil
}

// FileGroupExists checks if the FileGroup row exists.
func FileGroupExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"file_group\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if file_group exists")
	}

	return exists, nil
}

// Exists checks if the FileGroup row exists.
func (o *FileGroup) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FileGroupExists(ctx, exec, o.ID)
}
