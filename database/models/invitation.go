// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Invitation is an object representing the database table.
type Invitation struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email              string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Active             bool        `boil:"active" json:"active" toml:"active" yaml:"active"`
	CreatedByAccountID null.String `boil:"created_by_account_id" json:"created_by_account_id,omitempty" toml:"created_by_account_id" yaml:"created_by_account_id,omitempty"`
	ExpiresAt          time.Time   `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *invitationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invitationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvitationColumns = struct {
	ID                 string
	Email              string
	Active             string
	CreatedByAccountID string
	ExpiresAt          string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	Email:              "email",
	Active:             "active",
	CreatedByAccountID: "created_by_account_id",
	ExpiresAt:          "expires_at",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var InvitationTableColumns = struct {
	ID                 string
	Email              string
	Active             string
	CreatedByAccountID string
	ExpiresAt          string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "invitation.id",
	Email:              "invitation.email",
	Active:             "invitation.active",
	CreatedByAccountID: "invitation.created_by_account_id",
	ExpiresAt:          "invitation.expires_at",
	CreatedAt:          "invitation.created_at",
	UpdatedAt:          "invitation.updated_at",
}

// Generated where

var InvitationWhere = struct {
	ID                 whereHelperstring
	Email              whereHelperstring
	Active             whereHelperbool
	CreatedByAccountID whereHelpernull_String
	ExpiresAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"invitation\".\"id\""},
	Email:              whereHelperstring{field: "\"invitation\".\"email\""},
	Active:             whereHelperbool{field: "\"invitation\".\"active\""},
	CreatedByAccountID: whereHelpernull_String{field: "\"invitation\".\"created_by_account_id\""},
	ExpiresAt:          whereHelpertime_Time{field: "\"invitation\".\"expires_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"invitation\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"invitation\".\"updated_at\""},
}

// InvitationRels is where relationship names are stored.
var InvitationRels = struct {
	CreatedByAccount string
}{
	CreatedByAccount: "CreatedByAccount",
}

// invitationR is where relationships are stored.
type invitationR struct {
	CreatedByAccount *Account `boil:"CreatedByAccount" json:"CreatedByAccount" toml:"CreatedByAccount" yaml:"CreatedByAccount"`
}

// NewStruct creates a new relationship struct
func (*invitationR) NewStruct() *invitationR {
	return &invitationR{}
}

func (r *invitationR) GetCreatedByAccount() *Account {
	if r == nil {
		return nil
	}
	return r.CreatedByAccount
}

// invitationL is where Load methods for each relationship are stored.
type invitationL struct{}

var (
	invitationAllColumns            = []string{"id", "email", "active", "created_by_account_id", "expires_at", "created_at", "updated_at"}
	invitationColumnsWithoutDefault = []string{"email", "expires_at"}
	invitationColumnsWithDefault    = []string{"id", "active", "created_by_account_id", "created_at", "updated_at"}
	invitationPrimaryKeyColumns     = []string{"id"}
	invitationGeneratedColumns      = []string{}
)

type (
	// InvitationSlice is an alias for a slice of pointers to Invitation.
	// This should almost always be used instead of []Invitation.
	InvitationSlice []*Invitation
	// InvitationHook is the signature for custom Invitation hook methods
	InvitationHook func(context.Context, boil.ContextExecutor, *Invitation) error

	invitationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invitationType                 = reflect.TypeOf(&Invitation{})
	invitationMapping              = queries.MakeStructMapping(invitationType)
	invitationPrimaryKeyMapping, _ = queries.BindMapping(invitationType, invitationMapping, invitationPrimaryKeyColumns)
	invitationInsertCacheMut       sync.RWMutex
	invitationInsertCache          = make(map[string]insertCache)
	invitationUpdateCacheMut       sync.RWMutex
	invitationUpdateCache          = make(map[string]updateCache)
	invitationUpsertCacheMut       sync.RWMutex
	invitationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invitationAfterSelectHooks []InvitationHook

var invitationBeforeInsertHooks []InvitationHook
var invitationAfterInsertHooks []InvitationHook

var invitationBeforeUpdateHooks []InvitationHook
var invitationAfterUpdateHooks []InvitationHook

var invitationBeforeDeleteHooks []InvitationHook
var invitationAfterDeleteHooks []InvitationHook

var invitationBeforeUpsertHooks []InvitationHook
var invitationAfterUpsertHooks []InvitationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Invitation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invitationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Invitation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invitationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Invitation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invitationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Invitation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invitationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Invitation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invitationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Invitation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invitationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Invitation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invitationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Invitation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invitationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Invitation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invitationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvitationHook registers your hook function for all future operations.
func AddInvitationHook(hookPoint boil.HookPoint, invitationHook InvitationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invitationAfterSelectHooks = append(invitationAfterSelectHooks, invitationHook)
	case boil.BeforeInsertHook:
		invitationBeforeInsertHooks = append(invitationBeforeInsertHooks, invitationHook)
	case boil.AfterInsertHook:
		invitationAfterInsertHooks = append(invitationAfterInsertHooks, invitationHook)
	case boil.BeforeUpdateHook:
		invitationBeforeUpdateHooks = append(invitationBeforeUpdateHooks, invitationHook)
	case boil.AfterUpdateHook:
		invitationAfterUpdateHooks = append(invitationAfterUpdateHooks, invitationHook)
	case boil.BeforeDeleteHook:
		invitationBeforeDeleteHooks = append(invitationBeforeDeleteHooks, invitationHook)
	case boil.AfterDeleteHook:
		invitationAfterDeleteHooks = append(invitationAfterDeleteHooks, invitationHook)
	case boil.BeforeUpsertHook:
		invitationBeforeUpsertHooks = append(invitationBeforeUpsertHooks, invitationHook)
	case boil.AfterUpsertHook:
		invitationAfterUpsertHooks = append(invitationAfterUpsertHooks, invitationHook)
	}
}

// One returns a single invitation record from the query.
func (q invitationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Invitation, error) {
	o := &Invitation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invitation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Invitation records from the query.
func (q invitationQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvitationSlice, error) {
	var o []*Invitation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Invitation slice")
	}

	if len(invitationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Invitation records in the query.
func (q invitationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invitation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invitationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invitation exists")
	}

	return count > 0, nil
}

// CreatedByAccount pointed to by the foreign key.
func (o *Invitation) CreatedByAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByAccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// LoadCreatedByAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (invitationL) LoadCreatedByAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvitation interface{}, mods queries.Applicator) error {
	var slice []*Invitation
	var object *Invitation

	if singular {
		var ok bool
		object, ok = maybeInvitation.(*Invitation)
		if !ok {
			object = new(Invitation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvitation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvitation))
			}
		}
	} else {
		s, ok := maybeInvitation.(*[]*Invitation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvitation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvitation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &invitationR{}
		}
		if !queries.IsNil(object.CreatedByAccountID) {
			args = append(args, object.CreatedByAccountID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invitationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatedByAccountID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatedByAccountID) {
				args = append(args, obj.CreatedByAccountID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.CreatedByAccountInvitations = append(foreign.R.CreatedByAccountInvitations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedByAccountID, foreign.ID) {
				local.R.CreatedByAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.CreatedByAccountInvitations = append(foreign.R.CreatedByAccountInvitations, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedByAccount of the invitation to the related item.
// Sets o.R.CreatedByAccount to related.
// Adds o to related.R.CreatedByAccountInvitations.
func (o *Invitation) SetCreatedByAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invitation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, invitationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedByAccountID, related.ID)
	if o.R == nil {
		o.R = &invitationR{
			CreatedByAccount: related,
		}
	} else {
		o.R.CreatedByAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			CreatedByAccountInvitations: InvitationSlice{o},
		}
	} else {
		related.R.CreatedByAccountInvitations = append(related.R.CreatedByAccountInvitations, o)
	}

	return nil
}

// RemoveCreatedByAccount relationship.
// Sets o.R.CreatedByAccount to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Invitation) RemoveCreatedByAccount(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.CreatedByAccountID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by_account_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedByAccount = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByAccountInvitations {
		if queries.Equal(o.CreatedByAccountID, ri.CreatedByAccountID) {
			continue
		}

		ln := len(related.R.CreatedByAccountInvitations)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByAccountInvitations[i] = related.R.CreatedByAccountInvitations[ln-1]
		}
		related.R.CreatedByAccountInvitations = related.R.CreatedByAccountInvitations[:ln-1]
		break
	}
	return nil
}

// Invitations retrieves all the records using an executor.
func Invitations(mods ...qm.QueryMod) invitationQuery {
	mods = append(mods, qm.From("\"invitation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invitation\".*"})
	}

	return invitationQuery{q}
}

// FindInvitation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvitation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Invitation, error) {
	invitationObj := &Invitation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invitation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, invitationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invitation")
	}

	if err = invitationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invitationObj, err
	}

	return invitationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Invitation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invitation provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invitationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invitationInsertCacheMut.RLock()
	cache, cached := invitationInsertCache[key]
	invitationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invitationAllColumns,
			invitationColumnsWithDefault,
			invitationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(invitationType, invitationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invitationType, invitationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invitation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invitation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invitation")
	}

	if !cached {
		invitationInsertCacheMut.Lock()
		invitationInsertCache[key] = cache
		invitationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Invitation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Invitation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invitationUpdateCacheMut.RLock()
	cache, cached := invitationUpdateCache[key]
	invitationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invitationAllColumns,
			invitationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invitation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invitation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invitationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invitationType, invitationMapping, append(wl, invitationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invitation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invitation")
	}

	if !cached {
		invitationUpdateCacheMut.Lock()
		invitationUpdateCache[key] = cache
		invitationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invitationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invitation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invitation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvitationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invitationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invitation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invitationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invitation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invitation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Invitation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invitation provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invitationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invitationUpsertCacheMut.RLock()
	cache, cached := invitationUpsertCache[key]
	invitationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			invitationAllColumns,
			invitationColumnsWithDefault,
			invitationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invitationAllColumns,
			invitationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invitation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(invitationPrimaryKeyColumns))
			copy(conflict, invitationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invitation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(invitationType, invitationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invitationType, invitationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invitation")
	}

	if !cached {
		invitationUpsertCacheMut.Lock()
		invitationUpsertCache[key] = cache
		invitationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Invitation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Invitation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Invitation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invitationPrimaryKeyMapping)
	sql := "DELETE FROM \"invitation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invitation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invitation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invitationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no invitationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invitation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invitation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvitationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invitationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invitationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invitation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invitationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invitation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invitation")
	}

	if len(invitationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Invitation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvitation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvitationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvitationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invitationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invitation\".* FROM \"invitation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invitationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InvitationSlice")
	}

	*o = slice

	return nil
}

// InvitationExists checks if the Invitation row exists.
func InvitationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invitation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invitation exists")
	}

	return exists, nil
}

// Exists checks if the Invitation row exists.
func (o *Invitation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvitationExists(ctx, exec, o.ID)
}
